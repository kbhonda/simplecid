\NeedsTeXFormat{pLaTeX2e}
\RequirePackage{expl3}
\ProvidesExplPackage{simplecid}{2021/05/12}{1.0beta2}{using CID for outputing letter}

\RequirePackage{xkeyval}
\RequirePackage{pxatbegshi}

\cs_if_exist:NTF \Cjascale {\tl_set:Nn \l_sCID_scale {\Cjascale}} {\tl_set:Nn \l_sCID_scale {0.962216}}%%

\DeclareOption{dvipdfmx}{\str_if_exist:NF \c_sys_backend_str 
                                           {\str_gset:Nn \c_sys_backend_str {dvipdfmx}}
                        }

\bool_new:N \l_generate_mapfile_bool
\DeclareOptionX{generateMap}[true]{\use:c{bool_set_#1:N} \l_generate_mapfile_bool}

\bool_new:N \l_embed_mapfile_bool
\DeclareOptionX{embedMap}[true]{\use:c{bool_set_#1:N} \l_embed_mapfile_bool}

\DeclareOptionX{mapname}[scidfonts-\c_sys_backend_str.map]{\tl_set:Nx \l_mapfilename_sCID {#1}}

\DeclareOptionX{scale}{\tl_set:Nn \l_sCID_scale {#1}}

\ExecuteOptions{dvipdfmx}
\ProcessOptions
\ExecuteOptionsX{generateMap,embedMap,mapname}
\ProcessOptionsX

\iow_new:N \l_mapfile_sCID_iow
\int_const:Nn \l_sCID_subtfm_int {4}


%% for default min and gt 
\tl_set:Nn \l_sCID_default_minfont_tl  {HaranoAjiMincho-Regular.otf}
\tl_set:Nn \l_sCID_default_gothfont_tl {HaranoAjiGothic-Medium.otf}


\cs_new:Nn \sCID_tfm_suffix:NnN {
   \tl_set:Nn \l_tmpa_tl {\prop_item:Nn #1 {#2} }
   \exp_args:Nnx\tl_if_in:nnTF {mingoth} {\l_tmpa_tl} 
   {\tl_set:Nx #3 {\l_tmpa_tl}}
   {\tl_set:Nx #3 {\two@digits {\l_tmpa_tl}}}
}

\cs_new:Npn \sCIDSetting #1{
   \tl_set:Nn \l_tmpa_tl {#1} 
   \regex_replace_all:nnN {  ([-=]+\s*)+>  } {=} \l_tmpa_tl
   \exp_args:NNx\prop_set_from_keyval:Nn \l_tmpa_prop {\tl_use:N\l_tmpa_tl}
   \exp_args:NNx\prop_set_from_keyval:Nn \l_sCID_font_names_prop 
                                         {\prop_item:Nn \l_tmpa_prop {font~names}}
   \exp_args:NNx\prop_set_from_keyval:Nn \l_sCID_NFSS_names_prop 
                                         {\prop_item:Nn \l_tmpa_prop {NFSS~names}}
   \exp_args:NNnx\prop_put_if_new:Nnn \l_sCID_font_names_prop {min} {\l_sCID_default_minfont_tl}
   \exp_args:NNnx\prop_put_if_new:Nnn \l_sCID_font_names_prop {goth} {\l_sCID_default_gothfont_tl}
   \prop_put_if_new:Nnn \l_sCID_NFSS_names_prop {JY1/mc/m/n}  {min}
   \prop_put_if_new:Nnn \l_sCID_NFSS_names_prop {JY1/gt/m/n}  {goth}
   \prop_put_if_new:Nnn \l_sCID_NFSS_names_prop {JY1/mc/bx/n} {goth}
   \prop_put_if_new:Nnn \l_sCID_NFSS_names_prop {JY1/mc/b/n}  {goth}
%%% l_font_names_prop : ID -> actual name of fonts
%%% l_NFSS_names_prop : NFSS name of fonts   -> ID
   \prop_map_inline:Nn \l_sCID_NFSS_names_prop {
      \regex_split:nnN{/}{##1} \l_sCID_NFSS_seq
      %\tl_set:cx {l_sCID_##1_tl} { \prop_item:Nn \l_sCID_NFSS_names_prop {##1} }%
      \sCID_tfm_suffix:NnN \l_sCID_NFSS_names_prop {##1} \l_tmpa_tl
      \tl_set:cx {l_sCID_##1_tl} { \l_tmpa_tl }%
      \int_step_inline:nnn{0}{\int_eval:n {\l_sCID_subtfm_int - 1} }{
            \DeclareFontShape{\seq_item:Nn \l_sCID_NFSS_seq {1}}
                             {\seq_item:Nn \l_sCID_NFSS_seq {2}}
                             {\seq_item:Nn \l_sCID_NFSS_seq {3}}
                             {\seq_item:Nn \l_sCID_NFSS_seq {4}\two@digits{####1}}
                             {<-> s*[\l_sCID_scale] scid\tl_use:c{l_sCID_##1_tl}-\two@digits{####1}}{}
            \DeclareFontShape{JT1}
                             {\seq_item:Nn \l_sCID_NFSS_seq {2}}
                             {\seq_item:Nn \l_sCID_NFSS_seq {3}}
                             {\seq_item:Nn \l_sCID_NFSS_seq {4}\two@digits{####1}}
                             {<-> ssub* mc/m/n }{}
         }
      }
   \cs_gset_eq:NN \sCIDSetting   \use_none:n
   \bool_if:NT \l_generate_mapfile_bool
      {\sCID_generate_map:N \l_mapfile_sCID_iow}
   \bool_if:NT \l_embed_mapfile_bool
      {\AtBeginShipout{\setbox\AtBeginShipoutBox=\vbox{%
      \baselineskip\z@skip\lineskip\z@skip\lineskiplimit\z@
      \special{pdf:mapfile~\tl_use:N \l_mapfilename_sCID}\copy\AtBeginShipoutBox}}
      }
}

\cs_new:Nn \sCID_generate_map:N {
   \exp_args:Nx\str_case:nnF {\c_sys_backend_str} {
%         {dvips}    {\sCID_write_dvips_map_iow:N    #1 }
         {dvipdfmx} {\sCID_write_dvipdfmx_map_iow:N #1 }
      }
      {\typeout{>>>>>Driver,~\c_sys_backend_str,~not~supported}}%%false
}

\cs_new:Nn \sCID_write_dvipdfmx_map_iow:N {
   \exp_args:NNx \iow_open:Nn #1 {\l_mapfilename_sCID}
   \iow_now:Nx #1 {\iow_char:N \%\iow_char:N \%~
                   This~file~was~generated~by~simplecid~package~for~\c_sys_jobname_str.tex.^^J
                   \iow_char:N \%\iow_char:N \%~
                   This~file~is~used~for~dvipdfmx.^^J
                   \iow_char:N \%\iow_char:N \%~
                   Direct~modification~is~not~recommended.^^J
                   \iow_char:N \%\iow_char:N \%~
                   ~~\int_use:N\c_sys_year_int/
                     \int_use:N\c_sys_month_int/
                     \int_use:N\c_sys_day_int~
                     (\int_use:N\c_sys_hour_int
                      :
                      \int_use:N\c_sys_minute_int) ^^J
                   } 
   \prop_map_inline:Nn \l_sCID_font_names_prop {
      \str_if_in:nnTF { mingoth } { ##1 }
         {\str_set:Nx \l_tmpa_str { ##1 } }
         {\str_set:Nx \l_tmpa_str {\two@digits {##1} } }
      \iow_now:Nx #1 {scid\l_tmpa_str -raw~Identity-H~##2}
      } 
   \iow_close:N #1
}


\AtBeginDocument{\sCIDSetting{}}

\int_new:N \l_sCID_n_int
\int_new:N \l_sCID_r_int
\int_new:N \l_sCID_ku_int
\int_new:N \l_sCID_ten_int

\msg_new:nnnn{sCID}{unsetted~font}
                   {\msg_error_text:n{#1}^^J
                    Unsetted~font~is~used~for~\token_to_str:N\sCID\space \msg_line_context:.}
                   {\msg_info_text:n {#1}^^J
                    Set~the~ID~and~actual~font~for~
                    \k@encoding/\k@family/\k@series/\k@shape\space Using~\token_to_str:N\sCIDSetting.} 

\cs_gset:Npn \sCID #1 {
\char\jis"2121\kern-1zw%% guard by jghost begin
\group_begin:    
   \int_set:Nn \l_sCID_n_int   {\int_div_truncate:nn {#1-1} {8836}}
   \int_set:Nn \l_sCID_r_int   {\int_mod:nn {#1-1} {8836}}
   \int_set:Nn \l_sCID_ku_int  {\int_div_truncate:nn {\l_sCID_r_int} {94} + 1}
   \int_set:Nn \l_sCID_ten_int {\int_mod:nn {\l_sCID_r_int} {94} + 1}
   \cs_if_exist:cTF{\k@encoding/\k@family/\k@series/\k@shape\two@digits{\l_sCID_n_int}}
                   {\kanjishape{\k@shape\two@digits{\l_sCID_n_int}}\selectfont}
                   {\msg_error:nnn{sCID}{unsetted~font}{simplecid}}
   %\char\jis\int_eval:n{(\l_sCID_ku_int + 32) * 256 + (\l_sCID_ten_int + 32)}
   \char\kuten\int_eval:n{\l_sCID_ku_int * 256 + \l_sCID_ten_int}
\group_end:
\kern-1zw\char\jis"2121\relax%% guard by jghost end
}

\file_input:n {scid-prop.dat}


%%%aliases for sCID
\cs_new:Npn \sCIDSym #1 {
    \sCID{\prop_item:Nn \g_scid_symlist_prop {#1}}
}

\cs_new:Npn \sCIDMaru      #1{\sCIDSym{丸#1}}
\cs_new:Npn \sCIDNizyuMaru #1{\sCIDSym{丸丸#1}}
\cs_new:Npn \sCIDKuroMaru  #1{\sCIDSym{黒丸#1}}
\cs_new:Npn \sCIDKuroKaku  #1{\sCIDSym{黒角#1}}
\cs_new:Npn \sCIDKaku      #1{\sCIDSym{角#1}}
\cs_new:Npn \sCIDMaruKaku  #1{\sCIDSym{丸角#1}}
\cs_new:Npn \sCIDKuroMaruKaku  #1{\sCIDSym{黒丸角#1}}%

\cs_new:Npn \sCIDKakko     #1{\sCIDSym{(#1)}}

\endinput